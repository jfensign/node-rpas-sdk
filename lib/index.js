// Generated by CoffeeScript 1.4.0
(function() {
  var base_uri, key, q, request, resolve_uri, resources, rpas_headers,
    __slice = [].slice;

  request = require('request');

  q = require('q');

  resources = {
    users: "users",
    roles: "roles",
    taxonomies: "taxonomies",
    rated_items: "rated_items",
    workflows: "workflows",
    authenticate: "authenticate"
  };

  base_uri = "http://54.214.50.90";

  rpas_headers = {
    "api-version": "v1",
    "x-its-rpas": null
  };

  resolve_uri = function() {
    var params, resource;
    resource = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return ["" + base_uri + "/" + resources[resource], params].join("/");
  };

  exports.config = function(options) {
    var auth_encoded_str, auth_string, deferred;
    deferred = q.defer();
    if (options["api-version"]) {
      rpas_headers["api-version"] = options["api-version"];
    }
    if (options.token) {
      rpas_headers["x-its-rpas"] = options.token;
      q.resolve(options);
    } else {
      if (options.username && options.password) {
        auth_encoded_str = new Buffer("" + options.username + ":" + options.password).toString("base64");
        auth_string = "Basic " + auth_encoded_str;
        request({
          method: "post",
          url: resolve_uri("authenticate"),
          headers: {
            "Authorization": auth_string
          }
        }, function(e, r, b) {
          try {
            b = JSON.parse(b);
            console.log(b.Auth);
            if (b.Auth) {
              console.log("AUTHED");
              rpas_headers["x-its-rpas"] = b.Auth.RequestToken;
              return deferred.resolve(b);
            } else {
              console.log("NOT AUTHED");
              return deferred.reject(e || b);
            }
          } catch (e) {
            return deferred.reject(e || b);
          }
        });
      }
    }
    return deferred.promise;
  };

  for (key in resources) {
    exports[key] = {
      list: function(query) {
        var deferred;
        deferred = q.defer();
        request({
          url: resolve_uri("taxonomies"),
          qs: query,
          headers: rpas_headers,
          json: true
        }, function(e, r, b) {
          if (e) {
            return deferred.reject(e);
          } else {
            return deferred.resolve(b);
          }
        });
        return deferred.promise;
      },
      select: function(id, query) {
        var deferred;
        deferred = q.defer();
        request({
          url: resolve_uri("taxonomies", id),
          qs: query,
          headers: rpas_headers,
          json: true
        }, function(e, r, b) {
          if (e) {
            return deferred.reject(e);
          } else {
            return deferred.resolve(b);
          }
        });
        return deferred.promise;
      }
    };
  }

}).call(this);
